import copy
import unittest
import testlib
import json
import random
from ddt import file_data, ddt, data, unpack
import isrecursive

import program01 as program

@ddt
class Test(testlib.TestCase):
    def do_test(self, stringa, expected):
        '''Implementazione del test
            - stringa:   codifica della sequenza iniziale 
            - expected: tripla risultante attesa
        '''
        # prima controlliamo che l'implementazione sia ricorsiva
        try:
            isrecursive.decorate_module(program)
            program.es1(stringa)
        except isrecursive.RecursionDetectedError:
            pass
        else:
            raise Exception("Recursion not present")
        finally:
            isrecursive.undecorate_module(program)
        self.maxDiff = None
        # poi controlliamo che faccia quello che deve fare
        with self.ignored_function('builtins.print'), self.timer(1):
            result   = program.es1(stringa)
        print(result)
        self.assertEqual(type(result), tuple,    "il risultato non e' una tupla")
        self.assertEqual(result,       expected, "il risultato non e' corretto" )


    def test_1_Sequenza_di_5_numeri_(self):
        '''La sequenza e' '19 -3 2 -10 -20' '''
        domanda='19 -3 2 -10 -20'
        risposta=(3, 6, 25, 'Bob', 'Alice', 
                [(10,), (30,), (50,), (10, -20), (20, 10), (22, 32), (30, -20), 
                (19, -3, 32), (20, -10, -20), (22, 2, 10), (22, 12, -20), (19, -3, 2, 10), 
                (19, -3, 12, -20), (22, 2, -10, -20), (19, -3, 2, -10, -20)])
        return self.do_test(domanda, risposta)
        
    def test_2_Sequenza_decrescente_di_5_numeri(self):
        '''La sequenza e' '5 4 3 2 1' '''
        domanda='5 4 3 2 1'
        risposta=(3, 9, 31, 'Bob', 'Bob', 
                [(1,), (3,), (1, 2), (2, 1), (4, 1), (5, 2), (1, 1, 1), 
                (1, 3, 1), (4, 2, 1), (5, 1, 1), (5, 3, 1), (5, 4, 2), (1, 3, 2, 1), 
                (5, 1, 2, 1), (5, 4, 1, 1), (5, 4, 3, 1), (5, 4, 3, 2, 1)])
        return self.do_test(domanda, risposta)

    def test_3_Sequenza_di_8_numeri(self):
        '''La sequenza e' '5 -5 10 -10 20 -20 40 -40' '''
        domanda='5 -5 10 -10 20 -20 40 -40'
        risposta=(0, 24, 65, 'Bob', 'Bob', 
                [(10, 20, 40, 80), (5, -5, 20, 40, 80), (10, 10, -10, 40, 80), 
                 (10, 20, 20, -20, 80), (10, 20, 40, 40, -40), (5, -5, 10, -10, 40, 80), 
                 (5, -5, 20, 20, -20, 80), (5, -5, 20, 40, 40, -40), (10, 10, -10, 20, -20, 80), 
                 (10, 10, -10, 40, 40, -40), (10, 20, 20, -20, 40, -40), 
                 (5, -5, 10, -10, 20, -20, 80), (5, -5, 10, -10, 40, 40, -40), 
                 (5, -5, 20, 20, -20, 40, -40), (10, 10, -10, 20, -20, 40, -40), 
                 (5, -5, 10, -10, 20, -20, 40, -40)
                 ])
        return self.do_test(domanda, risposta)

    def test_4_Sequenza_di_5_numeri(self):
        '''La sequenza e' '4 3 2 3 4' '''
        domanda='4 3 2 3 4'
        risposta=(1, 1, 4, 'Bob', 'Alice', [(3, 3, 4), (1, 2, 3, 4), (4, 1, 3, 4), (4, 3, 2, 3, 4)]) 
        return self.do_test(domanda, risposta)

    def test_5_Sequenza_di_5_numeri(self):
        '''La sequenza e' '2 3 4 3 2' '''
        domanda='2 3 4 3 2'
        risposta=(0, 2, 5, 'Bob', 'Bob', [(2, 2, 2), (2, 3, 3), (2, 3, 1, 2), (2, 3, 4, 1), (2, 3, 4, 3, 2)]) 
        return self.do_test(domanda, risposta)


    def test_6_Sequenza_di_10_numeri(self):
        '''La sequenza e' '5 -5 10 -10 20 -20 40 -40 80 -80' '''
        domanda='5 -5 10 -10 20 -20 40 -40 80 -80'
        risposta=(120, 0, 326, 'Alice', 'Alice', 
        [(10, 20, 40, 80, 160), (5, -5, 20, 40, 80, 160), 
         (10, 10, -10, 40, 80, 160), (10, 20, 20, -20, 80, 160), 
         (10, 20, 40, 40, -40, 160), (10, 20, 40, 80, 80, -80), 
         (5, -5, 10, -10, 40, 80, 160), (5, -5, 20, 20, -20, 80, 160), 
         (5, -5, 20, 40, 40, -40, 160), (5, -5, 20, 40, 80, 80, -80), 
         (10, 10, -10, 20, -20, 80, 160), (10, 10, -10, 40, 40, -40, 160), 
         (10, 10, -10, 40, 80, 80, -80), (10, 20, 20, -20, 40, -40, 160), 
         (10, 20, 20, -20, 80, 80, -80), (10, 20, 40, 40, -40, 80, -80), 
         (5, -5, 10, -10, 20, -20, 80, 160), (5, -5, 10, -10, 40, 40, -40, 160), 
         (5, -5, 10, -10, 40, 80, 80, -80), (5, -5, 20, 20, -20, 40, -40, 160), 
         (5, -5, 20, 20, -20, 80, 80, -80), (5, -5, 20, 40, 40, -40, 80, -80), 
         (10, 10, -10, 20, -20, 40, -40, 160), (10, 10, -10, 20, -20, 80, 80, -80), 
         (10, 10, -10, 40, 40, -40, 80, -80), (10, 20, 20, -20, 40, -40, 80, -80), 
         (5, -5, 10, -10, 20, -20, 40, -40, 160), (5, -5, 10, -10, 20, -20, 80, 80, -80), 
         (5, -5, 10, -10, 40, 40, -40, 80, -80), (5, -5, 20, 20, -20, 40, -40, 80, -80), 
         (10, 10, -10, 20, -20, 40, -40, 80, -80), 
         (5, -5, 10, -10, 20, -20, 40, -40, 80, -80)
         ])
        return self.do_test(domanda, risposta)

    def test_7_Sequenza_di_10_numeri(self):
        '''La sequenza e' '2 -1 2 -1 2 -1 2 -1 2 -1' '''
        domanda='2 -1 2 -1 2 -1 2 -1 2 -1'
        risposta=(1873, 928, 8142, 'Alice', 'Alice',  
        [(1,), (3,), (1, 2), (2, -1), (2, 1), (2, 3), (3, 2), (1, -1, 1), (1, -1, 3), 
        (1, 1, -1), (1, 3, 3), (2, -1, 2), (2, 2, -1), (2, 2, 3), (2, 3, 2), (3, 1, -1), 
        (3, 1, 3), (3, 2, 2), (3, 3, 1), (3, 3, 3), (1, -1, 2, -1), (1, -1, 2, 3), 
        (1, -1, 3, 2), (1, 2, -1, 3), (1, 3, 2, -1), (2, -1, 1, -1), (2, -1, 1, 3), 
        (2, -1, 2, 2), (2, -1, 3, 1), (2, -1, 3, 3), (2, 1, -1, 3), (2, 2, -1, 2), 
        (2, 2, 2, -1), (2, 3, 1, -1), (2, 3, 3, 3), (3, 1, -1, 2), (3, 1, 2, -1), 
        (3, 2, -1, 1), (3, 2, -1, 3), (3, 2, 1, -1), (3, 2, 3, 3), (3, 3, 2, -1), 
        (3, 3, 2, 3), (3, 3, 3, 2), (1, -1, 1, -1, 3), (1, -1, 2, -1, 2), 
        (1, -1, 2, 2, -1), (1, -1, 3, 1, -1), (1, -1, 3, 3, 3), (1, 2, -1, 2, -1), 
        (2, -1, 1, -1, 2), (2, -1, 1, 2, -1), (2, -1, 2, -1, 1), (2, -1, 2, -1, 3), 
        (2, -1, 2, 1, -1), (2, -1, 2, 3, 3), (2, -1, 3, 2, -1), (2, -1, 3, 2, 3), 
        (2, -1, 3, 3, 2), (2, 1, -1, 2, -1), (2, 2, -1, 1, -1), (2, 2, -1, 3, 3), 
        (2, 3, 2, -1, 3), (2, 3, 3, 2, -1), (3, 1, -1, 1, -1), (3, 1, -1, 3, 3), 
        (3, 2, -1, 2, -1), (3, 2, -1, 2, 3), (3, 2, -1, 3, 2), (3, 2, 2, -1, 3), 
        (3, 2, 3, 2, -1), (3, 3, 1, -1, 3), (3, 3, 2, -1, 2), (3, 3, 2, 2, -1), 
        (3, 3, 3, 1, -1), (3, 3, 3, 3, 3), (1, -1, 1, -1, 2, -1), (1, -1, 2, -1, 1, -1), 
        (1, -1, 2, -1, 3, 3), (1, -1, 3, 2, -1, 3), (1, -1, 3, 3, 2, -1), 
        (2, -1, 1, -1, 1, -1), (2, -1, 1, -1, 3, 3), (2, -1, 2, -1, 2, -1), 
        (2, -1, 2, -1, 2, 3), (2, -1, 2, -1, 3, 2), (2, -1, 2, 2, -1, 3), 
        (2, -1, 2, 3, 2, -1), (2, -1, 3, 1, -1, 3), (2, -1, 3, 2, -1, 2), 
        (2, -1, 3, 2, 2, -1), (2, -1, 3, 3, 1, -1), (2, -1, 3, 3, 3, 3), 
        (2, 2, -1, 2, -1, 3), (2, 2, -1, 3, 2, -1), (2, 3, 2, -1, 2, -1), 
        (3, 1, -1, 2, -1, 3), (3, 1, -1, 3, 2, -1), (3, 2, -1, 1, -1, 3), 
        (3, 2, -1, 2, -1, 2), (3, 2, -1, 2, 2, -1), (3, 2, -1, 3, 1, -1), 
        (3, 2, -1, 3, 3, 3), (3, 2, 2, -1, 2, -1), (3, 3, 1, -1, 2, -1), 
        (3, 3, 2, -1, 1, -1), (3, 3, 2, -1, 3, 3), (3, 3, 3, 2, -1, 3), 
        (3, 3, 3, 3, 2, -1), (1, -1, 2, -1, 2, -1, 3), (1, -1, 2, -1, 3, 2, -1), 
        (1, -1, 3, 2, -1, 2, -1), (2, -1, 1, -1, 2, -1, 3), (2, -1, 1, -1, 3, 2, -1), 
        (2, -1, 2, -1, 1, -1, 3), (2, -1, 2, -1, 2, -1, 2), (2, -1, 2, -1, 2, 2, -1), 
        (2, -1, 2, -1, 3, 1, -1), (2, -1, 2, -1, 3, 3, 3), (2, -1, 2, 2, -1, 2, -1), 
        (2, -1, 3, 1, -1, 2, -1), (2, -1, 3, 2, -1, 1, -1), (2, -1, 3, 2, -1, 3, 3), 
        (2, -1, 3, 3, 2, -1, 3), (2, -1, 3, 3, 3, 2, -1), (2, 2, -1, 2, -1, 2, -1), 
        (3, 1, -1, 2, -1, 2, -1), (3, 2, -1, 1, -1, 2, -1), (3, 2, -1, 2, -1, 1, -1), 
        (3, 2, -1, 2, -1, 3, 3), (3, 2, -1, 3, 2, -1, 3), (3, 2, -1, 3, 3, 2, -1), 
        (3, 3, 2, -1, 2, -1, 3), (3, 3, 2, -1, 3, 2, -1), (3, 3, 3, 2, -1, 2, -1), 
        (1, -1, 2, -1, 2, -1, 2, -1), (2, -1, 1, -1, 2, -1, 2, -1), 
        (2, -1, 2, -1, 1, -1, 2, -1), (2, -1, 2, -1, 2, -1, 1, -1), 
        (2, -1, 2, -1, 2, -1, 3, 3), (2, -1, 2, -1, 3, 2, -1, 3), 
        (2, -1, 2, -1, 3, 3, 2, -1), (2, -1, 3, 2, -1, 2, -1, 3), 
        (2, -1, 3, 2, -1, 3, 2, -1), (2, -1, 3, 3, 2, -1, 2, -1), 
        (3, 2, -1, 2, -1, 2, -1, 3), (3, 2, -1, 2, -1, 3, 2, -1), 
        (3, 2, -1, 3, 2, -1, 2, -1), (3, 3, 2, -1, 2, -1, 2, -1), 
        (2, -1, 2, -1, 2, -1, 2, -1, 3), (2, -1, 2, -1, 2, -1, 3, 2, -1), 
        (2, -1, 2, -1, 3, 2, -1, 2, -1), (2, -1, 3, 2, -1, 2, -1, 2, -1), 
        (3, 2, -1, 2, -1, 2, -1, 2, -1), (2, -1, 2, -1, 2, -1, 2, -1, 2, -1)
        ])
        return self.do_test(domanda, risposta)

    def test_8_Sequenza_di_10_numeri(self):
        '''La sequenza e' '-1 2 -1 2 -1 2 -1 2 -1 2' '''
        domanda='-1 2 -1 2 -1 2 -1 2 -1 2'
        risposta=(241, 279, 1735, 'Bob', 'Bob',  
        [(-1, 2), (-1, 1, 1), (-1, 2, 2), (-1, 3, 1), 
        (-1, 1, -1, 2), (-1, 1, 3, 2), (-1, 2, -1, 1), (-1, 2, 2, 2), (-1, 2, 3, 1), 
        (-1, 3, 1, 2), (-1, 3, 2, 1), (-1, 3, 3, 2), (-1, 1, -1, 2, 2), (-1, 1, -1, 3, 1), 
        (-1, 1, 2, -1, 2), (-1, 2, -1, 1, 2), (-1, 2, -1, 2, 1), (-1, 2, -1, 3, 2), 
        (-1, 2, 1, -1, 2), (-1, 2, 2, -1, 1), (-1, 2, 3, 3, 2), (-1, 3, 1, -1, 1), 
        (-1, 3, 2, -1, 2), (-1, 3, 2, 3, 2), (-1, 3, 3, 2, 2), (-1, 3, 3, 3, 1), 
        (-1, 1, -1, 1, -1, 2), (-1, 1, -1, 2, -1, 1), (-1, 1, -1, 3, 3, 2), 
        (-1, 2, -1, 1, -1, 1), (-1, 2, -1, 2, -1, 2), (-1, 2, -1, 2, 3, 2), 
        (-1, 2, -1, 3, 2, 2), (-1, 2, -1, 3, 3, 1), (-1, 2, 2, -1, 3, 2), 
        (-1, 2, 3, 2, -1, 2), (-1, 3, 1, -1, 3, 2), (-1, 3, 2, -1, 2, 2), 
        (-1, 3, 2, -1, 3, 1), (-1, 3, 2, 2, -1, 2), (-1, 3, 3, 1, -1, 2), 
        (-1, 3, 3, 2, -1, 1), (-1, 3, 3, 3, 3, 2), (-1, 1, -1, 2, -1, 3, 2), 
        (-1, 1, -1, 3, 2, -1, 2), (-1, 2, -1, 1, -1, 3, 2), (-1, 2, -1, 2, -1, 2, 2), 
        (-1, 2, -1, 2, -1, 3, 1), (-1, 2, -1, 2, 2, -1, 2), (-1, 2, -1, 3, 1, -1, 2), 
        (-1, 2, -1, 3, 2, -1, 1), (-1, 2, -1, 3, 3, 3, 2), (-1, 2, 2, -1, 2, -1, 2), 
        (-1, 3, 1, -1, 2, -1, 2), (-1, 3, 2, -1, 1, -1, 2), (-1, 3, 2, -1, 2, -1, 1), 
        (-1, 3, 2, -1, 3, 3, 2), (-1, 3, 3, 2, -1, 3, 2), (-1, 3, 3, 3, 2, -1, 2), 
        (-1, 1, -1, 2, -1, 2, -1, 2), (-1, 2, -1, 1, -1, 2, -1, 2), 
        (-1, 2, -1, 2, -1, 1, -1, 2), (-1, 2, -1, 2, -1, 2, -1, 1), 
        (-1, 2, -1, 2, -1, 3, 3, 2), (-1, 2, -1, 3, 2, -1, 3, 2), 
        (-1, 2, -1, 3, 3, 2, -1, 2), (-1, 3, 2, -1, 2, -1, 3, 2), 
        (-1, 3, 2, -1, 3, 2, -1, 2), (-1, 3, 3, 2, -1, 2, -1, 2), 
        (-1, 2, -1, 2, -1, 2, -1, 3, 2), (-1, 2, -1, 2, -1, 3, 2, -1, 2), 
        (-1, 2, -1, 3, 2, -1, 2, -1, 2), (-1, 3, 2, -1, 2, -1, 2, -1, 2), 
        (-1, 2, -1, 2, -1, 2, -1, 2, -1, 2)
        ])
        return self.do_test(domanda, risposta)

    def test_9_Sequenza_di_12_numeri(self):
        '''La sequenza e' '2 3 1 3 2 1 3 2 1 3 2 1' '''
        domanda='2 3 1 3 2 1 3 2 1 3 2 1'
        risposta=(1380, 1800, 11027, 'Bob', 'Bob', 
        [(1, 1), (1, 1, 2), (2, 1, 1), (1, 1, 1, 1), (1, 1, 2, 2), (1, 1, 3, 1), 
        (2, 1, 1, 2), (2, 2, 1, 1), (1, 1, 1, 1, 2), (1, 1, 2, 1, 1), (1, 1, 2, 3, 1), 
        (1, 1, 3, 1, 2), (1, 1, 3, 2, 1), (2, 1, 1, 1, 1), (2, 1, 1, 2, 2), 
        (2, 1, 1, 3, 1), (2, 2, 1, 1, 2), (2, 2, 2, 1, 1), (2, 2, 2, 2, 2), 
        (2, 3, 1, 1, 1), (1, 1, 1, 1, 1, 1), (1, 1, 1, 1, 3, 1), (1, 1, 2, 3, 2, 1), 
        (1, 1, 3, 1, 1, 1), (1, 1, 3, 1, 3, 1), (1, 1, 3, 2, 1, 2), (2, 1, 1, 1, 1, 2), 
        (2, 1, 1, 2, 1, 1), (2, 1, 1, 2, 3, 1), (2, 1, 1, 3, 1, 2), (2, 1, 1, 3, 2, 1), 
        (2, 2, 1, 1, 1, 1), (2, 2, 1, 1, 2, 2), (2, 2, 1, 1, 3, 1), (2, 2, 2, 1, 1, 2), 
        (2, 2, 2, 2, 1, 1), (2, 2, 2, 2, 3, 1), (2, 2, 2, 3, 1, 2), (2, 2, 3, 1, 1, 1), 
        (2, 2, 3, 1, 2, 2), (2, 3, 1, 1, 1, 2), (2, 3, 1, 2, 1, 1), (2, 3, 1, 2, 2, 2), 
        (1, 1, 1, 1, 3, 2, 1), (1, 1, 3, 1, 3, 2, 1), (1, 1, 3, 2, 1, 1, 1), 
        (1, 1, 3, 2, 1, 3, 1), (2, 1, 1, 1, 1, 1, 1), (2, 1, 1, 1, 1, 3, 1), 
        (2, 1, 1, 2, 3, 2, 1), (2, 1, 1, 3, 1, 1, 1), (2, 1, 1, 3, 1, 3, 1), 
        (2, 1, 1, 3, 2, 1, 2), (2, 2, 1, 1, 1, 1, 2), (2, 2, 1, 1, 2, 1, 1), 
        (2, 2, 1, 1, 2, 3, 1), (2, 2, 1, 1, 3, 1, 2), (2, 2, 1, 1, 3, 2, 1), 
        (2, 2, 2, 1, 1, 1, 1), (2, 2, 2, 1, 1, 3, 1), (2, 2, 2, 2, 3, 2, 1), 
        (2, 2, 2, 3, 1, 1, 1), (2, 2, 2, 3, 1, 3, 1), (2, 2, 2, 3, 2, 1, 2), 
        (2, 2, 3, 1, 1, 1, 2), (2, 2, 3, 1, 2, 1, 1), (2, 2, 3, 1, 2, 3, 1), 
        (2, 2, 3, 1, 3, 1, 2), (2, 2, 3, 2, 1, 1, 1), (2, 2, 3, 2, 1, 2, 2), 
        (2, 3, 1, 1, 1, 1, 1), (2, 3, 1, 1, 1, 2, 2), (2, 3, 1, 1, 1, 3, 1), 
        (2, 3, 1, 2, 1, 1, 2), (2, 3, 1, 2, 2, 1, 1), (2, 3, 1, 2, 2, 3, 1), 
        (2, 3, 1, 2, 3, 1, 2), (2, 3, 1, 3, 1, 1, 1), (2, 3, 1, 3, 1, 2, 2), 
        (1, 1, 3, 2, 1, 3, 2, 1), (2, 1, 1, 1, 1, 3, 2, 1), (2, 1, 1, 3, 1, 3, 2, 1), 
        (2, 1, 1, 3, 2, 1, 1, 1), (2, 1, 1, 3, 2, 1, 3, 1), (2, 2, 1, 1, 1, 1, 1, 1), 
        (2, 2, 1, 1, 1, 1, 3, 1), (2, 2, 1, 1, 2, 3, 2, 1), (2, 2, 1, 1, 3, 1, 1, 1), 
        (2, 2, 1, 1, 3, 1, 3, 1), (2, 2, 1, 1, 3, 2, 1, 2), (2, 2, 2, 1, 1, 3, 2, 1), 
        (2, 2, 2, 3, 1, 3, 2, 1), (2, 2, 2, 3, 2, 1, 1, 1), (2, 2, 2, 3, 2, 1, 3, 1), 
        (2, 2, 3, 1, 1, 1, 1, 1), (2, 2, 3, 1, 1, 1, 3, 1), (2, 2, 3, 1, 2, 3, 2, 1), 
        (2, 2, 3, 1, 3, 1, 1, 1), (2, 2, 3, 1, 3, 1, 3, 1), (2, 2, 3, 1, 3, 2, 1, 2), 
        (2, 2, 3, 2, 1, 1, 1, 2), (2, 2, 3, 2, 1, 2, 1, 1), (2, 2, 3, 2, 1, 2, 3, 1), 
        (2, 2, 3, 2, 1, 3, 1, 2), (2, 3, 1, 1, 1, 1, 1, 2), (2, 3, 1, 1, 1, 2, 1, 1), 
        (2, 3, 1, 1, 1, 2, 3, 1), (2, 3, 1, 1, 1, 3, 1, 2), (2, 3, 1, 1, 1, 3, 2, 1), 
        (2, 3, 1, 2, 1, 1, 1, 1), (2, 3, 1, 2, 1, 1, 3, 1), (2, 3, 1, 2, 2, 3, 2, 1), 
        (2, 3, 1, 2, 3, 1, 1, 1), (2, 3, 1, 2, 3, 1, 3, 1), (2, 3, 1, 2, 3, 2, 1, 2), 
        (2, 3, 1, 3, 1, 1, 1, 2), (2, 3, 1, 3, 1, 2, 1, 1), (2, 3, 1, 3, 1, 2, 3, 1), 
        (2, 3, 1, 3, 1, 3, 1, 2), (2, 3, 1, 3, 2, 1, 1, 1), (2, 3, 1, 3, 2, 1, 2, 2), 
        (2, 1, 1, 3, 2, 1, 3, 2, 1), (2, 2, 1, 1, 1, 1, 3, 2, 1), 
        (2, 2, 1, 1, 3, 1, 3, 2, 1), (2, 2, 1, 1, 3, 2, 1, 1, 1), 
        (2, 2, 1, 1, 3, 2, 1, 3, 1), (2, 2, 2, 3, 2, 1, 3, 2, 1), 
        (2, 2, 3, 1, 1, 1, 3, 2, 1), (2, 2, 3, 1, 3, 1, 3, 2, 1), 
        (2, 2, 3, 1, 3, 2, 1, 1, 1), (2, 2, 3, 1, 3, 2, 1, 3, 1), 
        (2, 2, 3, 2, 1, 1, 1, 1, 1), (2, 2, 3, 2, 1, 1, 1, 3, 1), 
        (2, 2, 3, 2, 1, 2, 3, 2, 1), (2, 2, 3, 2, 1, 3, 1, 1, 1), 
        (2, 2, 3, 2, 1, 3, 1, 3, 1), (2, 2, 3, 2, 1, 3, 2, 1, 2), 
        (2, 3, 1, 1, 1, 1, 1, 1, 1), (2, 3, 1, 1, 1, 1, 1, 3, 1), 
        (2, 3, 1, 1, 1, 2, 3, 2, 1), (2, 3, 1, 1, 1, 3, 1, 1, 1), 
        (2, 3, 1, 1, 1, 3, 1, 3, 1), (2, 3, 1, 1, 1, 3, 2, 1, 2), 
        (2, 3, 1, 2, 1, 1, 3, 2, 1), (2, 3, 1, 2, 3, 1, 3, 2, 1), 
        (2, 3, 1, 2, 3, 2, 1, 1, 1), (2, 3, 1, 2, 3, 2, 1, 3, 1), 
        (2, 3, 1, 3, 1, 1, 1, 1, 1), (2, 3, 1, 3, 1, 1, 1, 3, 1), 
        (2, 3, 1, 3, 1, 2, 3, 2, 1), (2, 3, 1, 3, 1, 3, 1, 1, 1), 
        (2, 3, 1, 3, 1, 3, 1, 3, 1), (2, 3, 1, 3, 1, 3, 2, 1, 2), 
        (2, 3, 1, 3, 2, 1, 1, 1, 2), (2, 3, 1, 3, 2, 1, 2, 1, 1), 
        (2, 3, 1, 3, 2, 1, 2, 3, 1), (2, 3, 1, 3, 2, 1, 3, 1, 2), 
        (2, 2, 1, 1, 3, 2, 1, 3, 2, 1), (2, 2, 3, 1, 3, 2, 1, 3, 2, 1), 
        (2, 2, 3, 2, 1, 1, 1, 3, 2, 1), (2, 2, 3, 2, 1, 3, 1, 3, 2, 1), 
        (2, 2, 3, 2, 1, 3, 2, 1, 1, 1), (2, 2, 3, 2, 1, 3, 2, 1, 3, 1), 
        (2, 3, 1, 1, 1, 1, 1, 3, 2, 1), (2, 3, 1, 1, 1, 3, 1, 3, 2, 1), 
        (2, 3, 1, 1, 1, 3, 2, 1, 1, 1), (2, 3, 1, 1, 1, 3, 2, 1, 3, 1), 
        (2, 3, 1, 2, 3, 2, 1, 3, 2, 1), (2, 3, 1, 3, 1, 1, 1, 3, 2, 1), 
        (2, 3, 1, 3, 1, 3, 1, 3, 2, 1), (2, 3, 1, 3, 1, 3, 2, 1, 1, 1), 
        (2, 3, 1, 3, 1, 3, 2, 1, 3, 1), (2, 3, 1, 3, 2, 1, 1, 1, 1, 1), 
        (2, 3, 1, 3, 2, 1, 1, 1, 3, 1), (2, 3, 1, 3, 2, 1, 2, 3, 2, 1), 
        (2, 3, 1, 3, 2, 1, 3, 1, 1, 1), (2, 3, 1, 3, 2, 1, 3, 1, 3, 1), 
        (2, 3, 1, 3, 2, 1, 3, 2, 1, 2), (2, 2, 3, 2, 1, 3, 2, 1, 3, 2, 1), 
        (2, 3, 1, 1, 1, 3, 2, 1, 3, 2, 1), (2, 3, 1, 3, 1, 3, 2, 1, 3, 2, 1), 
        (2, 3, 1, 3, 2, 1, 1, 1, 3, 2, 1), (2, 3, 1, 3, 2, 1, 3, 1, 3, 2, 1), 
        (2, 3, 1, 3, 2, 1, 3, 2, 1, 1, 1), (2, 3, 1, 3, 2, 1, 3, 2, 1, 3, 1), 
        (2, 3, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1)])
        return self.do_test(domanda, risposta)

    def test_10_Sequenza_di_potenze_di_2_decrescenti_(self):
        domanda  = '64 32 16 8 4 2 1'
        risposta = (0, 720, 1957, 'Bob', 'Bob', 
                [   (1,), (3,), (5,), (7,), (9,), (11,), (13,), (15,), (17,), (19,), (21,), (23,), (25,), (27,), (29,), (31,), 
                    (33,), (35,), (37,), (39,), (41,), (43,), (45,), (47,), (49,), (51,), (53,), (55,), (57,), (59,), (61,), (63,), 
                    (2, 1), (4, 1), (6, 1), (8, 1), (8, 3), (10, 1), (12, 1), (14, 1), (16, 1), (16, 3), (16, 5), (16, 7), (18, 1), 
                    (20, 1), (22, 1), (24, 1), (24, 3), (26, 1), (28, 1), (30, 1), (32, 1), (32, 3), (32, 5), (32, 7), (32, 9), 
                    (32, 11), (32, 13), (32, 15), (34, 1), (36, 1), (38, 1), (40, 1), (40, 3), (42, 1), (44, 1), (46, 1), (48, 1), 
                    (48, 3), (48, 5), (48, 7), (50, 1), (52, 1), (54, 1), (56, 1), (56, 3), (58, 1), (60, 1), (62, 1), (64, 1), 
                    (64, 3), (64, 5), (64, 7), (64, 9), (64, 11), (64, 13), (64, 15), (64, 17), (64, 19), (64, 21), (64, 23), 
                    (64, 25), (64, 27), (64, 29), (64, 31), 
                    (4, 2, 1), (8, 2, 1), (8, 4, 1), (12, 2, 1), (16, 2, 1), (16, 4, 1), (16, 6, 1), (16, 8, 1), (16, 8, 3), 
                    (20, 2, 1), (24, 2, 1), (24, 4, 1), (28, 2, 1), (32, 2, 1), (32, 4, 1), (32, 6, 1), (32, 8, 1), (32, 8, 3), 
                    (32, 10, 1), (32, 12, 1), (32, 14, 1), (32, 16, 1), (32, 16, 3), (32, 16, 5), (32, 16, 7), (36, 2, 1), 
                    (40, 2, 1), (40, 4, 1), (44, 2, 1), (48, 2, 1), (48, 4, 1), (48, 6, 1), (48, 8, 1), (48, 8, 3), (52, 2, 1), 
                    (56, 2, 1), (56, 4, 1), (60, 2, 1), (64, 2, 1), (64, 4, 1), (64, 6, 1), (64, 8, 1), (64, 8, 3), (64, 10, 1), 
                    (64, 12, 1), (64, 14, 1), (64, 16, 1), (64, 16, 3), (64, 16, 5), (64, 16, 7), (64, 18, 1), (64, 20, 1), 
                    (64, 22, 1), (64, 24, 1), (64, 24, 3), (64, 26, 1), (64, 28, 1), (64, 30, 1), (64, 32, 1), (64, 32, 3), 
                    (64, 32, 5), (64, 32, 7), (64, 32, 9), (64, 32, 11), (64, 32, 13), (64, 32, 15), 
                    (8, 4, 2, 1), (16, 4, 2, 1), (16, 8, 2, 1), (16, 8, 4, 1), (24, 4, 2, 1), (32, 4, 2, 1), (32, 8, 2, 1), 
                    (32, 8, 4, 1), (32, 12, 2, 1), (32, 16, 2, 1), (32, 16, 4, 1), (32, 16, 6, 1), (32, 16, 8, 1), (32, 16, 8, 3), 
                    (40, 4, 2, 1), (48, 4, 2, 1), (48, 8, 2, 1), (48, 8, 4, 1), (56, 4, 2, 1), (64, 4, 2, 1), (64, 8, 2, 1), 
                    (64, 8, 4, 1), (64, 12, 2, 1), (64, 16, 2, 1), (64, 16, 4, 1), (64, 16, 6, 1), (64, 16, 8, 1), (64, 16, 8, 3), 
                    (64, 20, 2, 1), (64, 24, 2, 1), (64, 24, 4, 1), (64, 28, 2, 1), (64, 32, 2, 1), (64, 32, 4, 1), (64, 32, 6, 1), 
                    (64, 32, 8, 1), (64, 32, 8, 3), (64, 32, 10, 1), (64, 32, 12, 1), (64, 32, 14, 1), (64, 32, 16, 1), (64, 32, 16, 3), 
                    (64, 32, 16, 5), (64, 32, 16, 7), 
                    (16, 8, 4, 2, 1), (32, 8, 4, 2, 1), (32, 16, 4, 2, 1), (32, 16, 8, 2, 1), (32, 16, 8, 4, 1), (48, 8, 4, 2, 1), 
                    (64, 8, 4, 2, 1), (64, 16, 4, 2, 1), (64, 16, 8, 2, 1), (64, 16, 8, 4, 1), (64, 24, 4, 2, 1), (64, 32, 4, 2, 1), 
                    (64, 32, 8, 2, 1), (64, 32, 8, 4, 1), (64, 32, 12, 2, 1), (64, 32, 16, 2, 1), (64, 32, 16, 4, 1), (64, 32, 16, 6, 1), 
                    (64, 32, 16, 8, 1), (64, 32, 16, 8, 3), 
                    (32, 16, 8, 4, 2, 1), (64, 16, 8, 4, 2, 1), (64, 32, 8, 4, 2, 1), (64, 32, 16, 4, 2, 1), (64, 32, 16, 8, 2, 1), 
                    (64, 32, 16, 8, 4, 1), (64, 32, 16, 8, 4, 2, 1)])
        return self.do_test(domanda, risposta)

    def test_11_Sequenza_di_zeri(self):
        domanda  = '64 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0'
        risposta = (1, 0, 20, 'Alice', 'Alice', 
                [   (64,), 
                    (64, 0), 
                    (64, 0, 0), 
                    (64, 0, 0, 0), 
                    (64, 0, 0, 0, 0), 
                    (64, 0, 0, 0, 0, 0), 
                    (64, 0, 0, 0, 0, 0, 0), 
                    (64, 0, 0, 0, 0, 0, 0, 0), 
                    (64, 0, 0, 0, 0, 0, 0, 0, 0), 
                    (64, 0, 0, 0, 0, 0, 0, 0, 0, 0), 
                    (64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), 
                    (64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), 
                    (64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), 
                    (64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), 
                    (64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), 
                    (64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), 
                    (64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), 
                    (64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), 
                    (64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), 
                    (64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)])
        return self.do_test(domanda, risposta)


if __name__ == '__main__':
    Test.main()

